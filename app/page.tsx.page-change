  // Define a function to handle page changes
  const handlePageChangeImpl = (newPage: number) => {
    console.log(`Changing to page ${newPage}, current state:`, {
      currentPage: state.currentPage,
      totalPages: state.totalPages,
      hasStoredPage: state.allResults[newPage - 1]?.length > 0,
    })
    
    // Check if we already have this page in our allResults array
    if (state.allResults[newPage - 1]?.length > 0) {
      console.log(`Using cached results for page ${newPage}:`, state.allResults[newPage - 1])
      
      // We already have this page, just update the current page and display those results
      setState((prev) => ({
        ...prev,
        currentPage: newPage,
        results: [
          ...prev.results.filter(
            (r) => r.isCustomUrl || prev.selectedResults.includes(r.id)
          ),
          ...prev.allResults[newPage - 1],
        ],
      }))
    } else {
      console.warn(`Page ${newPage} not found in cached results`)
      
      // If we don't have the page, show a message
      toast({
        title: 'Navigation Error',
        description: 'Page not found in cached results',
        variant: 'destructive',
      })
    }
  }
